version: "3"

networks:
  re_replication:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "192.168.1.0/24"

services:
  # Primary
  primary:
    image: ${IMAGE_NAME}
    ports:
      - 6379:6379
    container_name: primary
    restart: unless-stopped    
    volumes:
      - ./conf/primary:/usr/local/etc/redis:ro
      - ./6379:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_replication:
        ipv4_address: 192.168.1.11

  # Replica 1
  replica1:
    image: ${IMAGE_NAME}
    ports:
      - 6380:6379
    container_name: replica1
    restart: unless-stopped    
    volumes:
      - ./conf/replica:/usr/local/etc/redis:ro
      - ./6380:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_replication:
        ipv4_address: 192.168.1.12
    depends_on:
        - primary

  # Replica 2
  replica2:
    image: ${IMAGE_NAME}
    ports:
      - 6381:6379
    container_name: replica2
    restart: unless-stopped    
    volumes:
      - ./conf/replica:/usr/local/etc/redis:ro
      - ./6381:/data:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      re_replication:
        ipv4_address: 192.168.1.13
    depends_on:
        - primary

# Sentinel 1
  sentinel1:
    image: ${IMAGE_NAME}
    ports:
      - 5000:6379
    container_name: sentinel1
    restart: unless-stopped    
    volumes:
      - ./5000:/usr/local/etc/redis:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--sentinel"]
    networks:
      re_replication:
        ipv4_address: 192.168.1.181
    depends_on:
        - primary
        - replica1
        - replica2

# Sentinel 2
  sentinel2:
    image: ${IMAGE_NAME}
    ports:
      - 5001:6379
    container_name: sentinel2
    restart: unless-stopped    
    volumes:
      - ./5001:/usr/local/etc/redis:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--sentinel"]
    networks:
      re_replication:
        ipv4_address: 192.168.1.182
    depends_on:
        - primary
        - replica1
        - replica2

# Sentinel 3
  sentinel3:
    image: ${IMAGE_NAME}
    ports:
      - 5002:6379
    container_name: sentinel3
    restart: unless-stopped    
    volumes:
      - ./5002:/usr/local/etc/redis:rw
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--sentinel"]
    networks:
      re_replication:
        ipv4_address: 192.168.1.183
    depends_on:
        - primary
        - replica1
        - replica2

# Redis Insight
  redisinsight:
    image: redis/redisinsight:2.50
    container_name: redisinsight
    ports:
      - 5540:5540
    restart: unless-stopped    
    volumes:
      - ./5540:/data:rw
    networks:
      re_replication:
        ipv4_address: 192.168.1.198
    depends_on:
        - primary
        - replica1
        - replica2

#
# redis
# https://hub.docker.com/_/redis
#
# redis/redisinsight
# https://hub.docker.com/r/redis/redisinsight
#
# Next, point your browser to http://localhost:5540.
# Redis Insight also provides a health check endpoint at http://localhost:5540/api/health/ 
# to monitor the health of the running container.
#
# Redis configuration file example
# https://redis.io/docs/latest/operate/oss_and_stack/management/config-file/
# 
########################## CLUSTER DOCKER/NAT support  ########################
#
# In certain deployments, Redis Cluster nodes address discovery fails, because
# addresses are NAT-ted or because ports are forwarded (the typical case is
# Docker and other containers).
#
# In order to make Redis Cluster working in such environments, a static
# configuration where each node knows its public address is needed. The
# following four options are used for this scope, and are:
#
# * cluster-announce-ip
# * cluster-announce-port
# * cluster-announce-tls-port
# * cluster-announce-bus-port
#
# Each instructs the node about its address, client ports (for connections
# without and with TLS) and cluster message bus port. The information is then
# published in the header of the bus packets so that other nodes will be able to
# correctly map the address of the node publishing the information.
#
# If tls-cluster is set to yes and cluster-announce-tls-port is omitted or set
# to zero, then cluster-announce-port refers to the TLS port. Note also that
# cluster-announce-tls-port has no effect if tls-cluster is set to no.
#
# If the above options are not used, the normal Redis Cluster auto-detection
# will be used instead.
#
# Note that when remapped, the bus port may not be at the fixed offset of
# clients port + 10000, so you can specify any port and bus-port depending
# on how they get remapped. If the bus-port is not set, a fixed offset of
# 10000 will be used as usual.
#
# Example:
#
# cluster-announce-ip 10.1.1.5
# cluster-announce-tls-port 6379
# cluster-announce-port 0
# cluster-announce-bus-port 6380
#

#
# EOF (2024/06/30)
# 
